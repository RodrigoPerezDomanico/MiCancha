{"version":3,"sources":["components/header.js","components/Login.js","pages/App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","clicks","Login","state","handleChange","e","setState","target","name","value","console","log","type","placeholder","onChange","this","UserName","UserPass","onClick","handleClick","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SAiBeA,G,mLAZP,OAAO,4BAAQC,UAAU,UAGrB,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,uBAAb,cAEA,uBAAGA,UAAU,uBAAb,uC,GARKC,IAAMC,Y,OCAvBC,G,MAAO,GA4CIC,E,4MA1CXC,MAAO,G,EASPC,aAAc,SAAAC,GAEV,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,S,6DAV/BR,GAAQ,GACE,EACNS,QAAQC,IAAR,0BAA+BV,EAA/B,WAEAS,QAAQC,IAAR,2BAAgCV,EAAhC,c,+BAWR,OAAO,yBAAKH,UAAU,WACd,yBAAKA,UAAU,eAEX,wBAAIA,UAAU,eACV,wBAAIA,UAAU,sBACV,2BAAOU,KAAK,WAAWI,KAAK,OAAOC,YAAY,kCAA8BC,SAAUC,KAAKX,aAAcK,MAAOM,KAAKZ,MAAMa,YAEhI,wBAAIlB,UAAU,sBACV,2BAAOU,KAAK,WAAWI,KAAK,WAAWC,YAAY,gBAAaC,SAAUC,KAAKX,aAAcK,MAAOM,KAAKZ,MAAMc,YAEnH,wBAAInB,UAAU,uBACV,4BAAQoB,QAASH,KAAKI,aAAtB,aAIJ,wBAAIrB,UAAU,qBACV,uBAAGsB,KAAK,MAAR,yB,GAlCJrB,IAAMC,WCYXqB,E,uKARX,OAAO,yBAAKvB,UAAY,oBACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAJYC,IAAMC,WCMJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACG,kBAAC,EAAD,OACkBC,SAASC,eAAe,SDyHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.e46c920c.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Header.css';\n\nclass Header extends React.Component{\n    render(){\n        return <header className=\"Header\">\n            \n    \n            <div className=\"header--title\">\n                <p className=\"header--title__name\">Hay equipo</p>\n            \n                <p className=\"header--title__desc\">La app para que armes el team</p>\n            </div>\n\n        </header>  \n    }\n}\nexport default Header\n","import React from 'react';\nimport './styles/Login.css';\n\nvar clicks=0\nclass Login extends React.Component {\n    state ={}\n    handleClick() {\n        clicks+=1\n        if(clicks<2){\n            console.log(`Se ha realizado ${clicks} Click`)\n        }else{\n            console.log(`Se han realizado ${clicks} Clicks`)\n        }\n    }\n    handleChange= e => {\n        //console.log({value:e.target.value})\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n   \n    render (){\n    return <div className=\"mainDiv\">\n            <div className=\"main--login\">\n                \n                <ul className=\"login--menu\">\n                    <li className=\"login--menu__input\">\n                        <input name=\"UserName\" type=\"text\" placeholder=\"Usuario o Correo Electrónico\"onChange={this.handleChange} value={this.state.UserName}/>\n                    </li>\n                    <li className=\"login--menu__input\">\n                        <input name=\"UserPass\" type=\"password\" placeholder=\"Contraseña\" onChange={this.handleChange} value={this.state.UserPass}/>\n                    </li>\n                    <li className=\"login--menu__button\">\n                        <button onClick={this.handleClick}\n\n                        >Ingresar</button>\n                    </li>\n                    <li className=\"login--menu__href\">\n                        <a href=\"./\">Regístrate</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    }\n  \n}\n\nexport default Login","import React from 'react';\nimport './styles/App.css';\nimport Header from '../components/header'\nimport Login from '../components/Login'\n\n\nclass App extends React.Component{\n  render(){\n    return <div className = \"global Container\">\n      <Header/>\n      <Login/>\n    </div>\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n     <App />\n   </React.StrictMode>,document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}